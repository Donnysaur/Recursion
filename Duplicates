#include <iostream>
using namespace std;

// Check if element already appeared before
bool isVisited(int arr[], int index, int current) {
    if (index >= current)
        return false;
    if (arr[index] == arr[current])
        return true;
    return isVisited(arr, index + 1, current);
}

// Count frequency of a specific element recursively
int countFrequency(int arr[], int n, int element, int index = 0) {
    if (index >= n)
        return 0;
    return (arr[index] == element) + countFrequency(arr, n, element, index + 1);
}

// Display frequency of each unique element
void displayFrequencies(int arr[], int n, int index = 0) {
    if (index >= n)
        return;
    if (!isVisited(arr, 0, index)) {
        int freq = countFrequency(arr, n, arr[index]);
        cout << arr[index] << " appears " << freq << " time(s)" << endl;
    }
    displayFrequencies(arr, n, index + 1);
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    if (size <= 0) {
        cout << "Invalid array size!" << endl;
        return 1;
    }

    int* arr = new int[size];
    cout << "Enter " << size << " elements: " << endl;
    for (int i = 0; i < size; ++i) {
        cin >> arr[i];
    }

    cout << "\nFrequencies of elements:\n";
    displayFrequencies(arr, size);

    int choice;
    do {
        int target;
        cout << "\nEnter element to find its frequency: ";
        cin >> target;

        int freq = countFrequency(arr, size, target);
        if (freq > 0) {
            cout << target << " appears " << freq << " time(s)" << endl;
        } else {
            cout << target << " is not in the array." << endl;
        }

        cout << "\nDo you want to:\n";
        cout << "1 = Find other elements\n";
        cout << "2 = End the code\n";
        cout << "Enter your choice: ";
        cin >> choice;

        while (choice != 1 && choice != 2) {
            cout << "Invalid choice. Enter 1 or 2: ";
            cin >> choice;
        }
    } while (choice == 1);

    delete[] arr;
    cout << "Program ended. Goodbye!" << endl;
    return 0;
}
